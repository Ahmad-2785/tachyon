load("//bazel:tachyon_cc.bzl", "tachyon_cc_library", "tachyon_cc_unittest")

package(default_visibility = ["//visibility:public"])

tachyon_cc_library(
    name = "blinder",
    hdrs = ["blinder.h"],
    deps = [":random_field_generator"],
)

tachyon_cc_library(
    name = "blinded_polynomial",
    hdrs = ["blinded_polynomial.h"],
)

tachyon_cc_library(
    name = "evals_pair",
    hdrs = ["evals_pair.h"],
)

tachyon_cc_library(
    name = "halo2_prover",
    hdrs = ["halo2_prover.h"],
    deps = [
        ":halo2_random_field_generator",
        ":prover",
    ],
)

tachyon_cc_library(
    name = "halo2_prover_test",
    testonly = True,
    hdrs = ["halo2_prover_test.h"],
    deps = [
        ":blinder",
        ":halo2_prover",
        "//tachyon/crypto/commitments/kzg:kzg_commitment_scheme",
        "//tachyon/math/elliptic_curves/bn/bn254:g1",
        "//tachyon/math/elliptic_curves/bn/bn254:g2",
        "//tachyon/math/polynomials/univariate:univariate_evaluation_domain_factory",
        "//tachyon/zk/transcript:poseidon_transcript",
        "@com_google_absl//absl/memory",
    ],
)

tachyon_cc_library(
    name = "halo2_random_field_generator",
    hdrs = ["halo2_random_field_generator.h"],
    deps = [
        "//tachyon/crypto/random/xor_shift:xor_shift_rng",
        "//tachyon/math/base:big_int",
        "@com_google_googletest//:gtest_prod",
    ],
)

tachyon_cc_library(
    name = "prover",
    hdrs = ["prover.h"],
    deps = [
        ":blinded_polynomial",
        ":blinder",
        "//tachyon/zk/transcript",
    ],
)

tachyon_cc_library(
    name = "random_field_generator",
    hdrs = ["random_field_generator.h"],
)

tachyon_cc_library(
    name = "ref",
    hdrs = ["ref.h"],
)

tachyon_cc_library(
    name = "polynomial_pointer",
    hdrs = ["polynomial_pointer.h"],
)

tachyon_cc_library(
    name = "prover_query",
    hdrs = ["prover_query.h"],
    deps = [
        ":blinded_polynomial",
        ":ref",
    ],
)

tachyon_cc_library(
    name = "value",
    hdrs = ["value.h"],
    deps = ["//tachyon/math/base:rational_field"],
)

tachyon_cc_library(
    name = "verifier_query",
    hdrs = ["verifier_query.h"],
    deps = [":ref"],
)

tachyon_cc_unittest(
    name = "base_unittests",
    srcs = [
        "blinder_unittest.cc",
        "halo2_random_field_generator_unittest.cc",
        "prover_unittest.cc",
        "ref_unittest.cc",
        "value_unittest.cc",
    ],
    deps = [
        ":halo2_prover_test",
        ":ref",
        ":value",
        "//tachyon/base:random",
        "//tachyon/base/containers:container_util",
        "//tachyon/math/finite_fields/test:gf7",
    ],
)
